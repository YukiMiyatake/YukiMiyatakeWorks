// Code generated by MockGen. DO NOT EDIT.
// Source: pb/hello.pb.go

// Package mock_Hello is a generated GoMock package.
package mock_Hello

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	Hello "grpc/pb"
	reflect "reflect"
)

// MockHelloClient is a mock of HelloClient interface
type MockHelloClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelloClientMockRecorder
}

// MockHelloClientMockRecorder is the mock recorder for MockHelloClient
type MockHelloClientMockRecorder struct {
	mock *MockHelloClient
}

// NewMockHelloClient creates a new mock instance
func NewMockHelloClient(ctrl *gomock.Controller) *MockHelloClient {
	mock := &MockHelloClient{ctrl: ctrl}
	mock.recorder = &MockHelloClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloClient) EXPECT() *MockHelloClientMockRecorder {
	return m.recorder
}

// Hello mocks base method
func (m *MockHelloClient) Hello(ctx context.Context, in *Hello.HelloRequest, opts ...grpc.CallOption) (*Hello.HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*Hello.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello
func (mr *MockHelloClientMockRecorder) Hello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHelloClient)(nil).Hello), varargs...)
}

// MockHelloServer is a mock of HelloServer interface
type MockHelloServer struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServerMockRecorder
}

// MockHelloServerMockRecorder is the mock recorder for MockHelloServer
type MockHelloServerMockRecorder struct {
	mock *MockHelloServer
}

// NewMockHelloServer creates a new mock instance
func NewMockHelloServer(ctrl *gomock.Controller) *MockHelloServer {
	mock := &MockHelloServer{ctrl: ctrl}
	mock.recorder = &MockHelloServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloServer) EXPECT() *MockHelloServerMockRecorder {
	return m.recorder
}

// Hello mocks base method
func (m *MockHelloServer) Hello(arg0 context.Context, arg1 *Hello.HelloRequest) (*Hello.HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", arg0, arg1)
	ret0, _ := ret[0].(*Hello.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello
func (mr *MockHelloServerMockRecorder) Hello(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHelloServer)(nil).Hello), arg0, arg1)
}
